module grid ( input         Clk,                // 50 MHz clock
                             Reset,              // Active-high reset signal
                             frame_clk,          // The clock indicating a new frame (~60Hz)
               input [9:0]   DrawX, DrawY,       // Current pixel coordinates
					input [7:0]	  keycode,
					input [2:0] random,
					output logic [2:0] pixel_value
					// Whether current pixel belongs to ball or background
              );
	
	logic frame_clk_delayed, frame_clk_rising_edge;
	logic [2:0] regs[24][18], regs_in[24][18];
	logic [1:0] check, down_check;
	logic [4:0] left_x, top_y, bottom_y, right_x, left_x_in, right_x_in, top_y_in, bottom_y_in;
	logic [2:0] moving_block, moving_block_in, hold_value;
	logic [4:0] moving_block_x[4], moving_block_x_new[4];
	logic [4:0] moving_block_y[4], moving_block_y_new[4];
	reg [4:0] extension[7:0];
	initial begin
		extension[7] <= 5'd3;
		extension[6] <= 5'd2;
		extension[5] <= 5'd2;
		extension[4] <= 5'd1;
		extension[3] <= 5'd2;
		extension[2] <= 5'd2;
		extension[1] <= 5'd2;
		extension[0] <= 5'd0;
	end
	logic [4:0] counter, counter_in, counter_counter, counter_counter_in;
	always_ff @ (posedge Clk) begin
		frame_clk_delayed <= frame_clk;
		frame_clk_rising_edge <= (frame_clk == 1'b1) && (frame_clk_delayed == 1'b0);
	end
	
	always_ff @ (posedge Clk)
	begin
		if (Reset)
		begin
			moving_block <= 3'b0;
			counter_counter <= 5'b0;
			for(int i = 0; i < 4; i++)
			begin
				moving_block_x[i] <= 5'b0;
				moving_block_y[i] <= 5'b0;
			end
			counter <= 5'b0;
			left_x <= 5'b0;
			right_x <= 5'b0;
			top_y <= 5'b0;
			bottom_y <= 5'b0;
		end
		else
		begin
			counter_counter <= counter_counter_in;
			moving_block <= moving_block_in;
			counter <= counter_in;
			moving_block_y <= moving_block_y_new;
			moving_block_x <= moving_block_x_new;
			regs <= regs_in;
			left_x <= left_x_in;
			right_x <= right_x_in;
			bottom_y <= bottom_y_in;
			top_y <= top_y_in;
		end
	end
	

	
	always_comb
	begin
		moving_block_in = moving_block;
		counter_in = counter;
		
		regs_in = regs;
		counter_counter_in = counter_counter;
		moving_block_x_new = moving_block_x;
		moving_block_y_new = moving_block_y;
		check = 0;
		down_check = 0;
		left_x_in = 17;
		bottom_y_in = 0;
		right_x_in = 0;
		top_y_in = 23;
		
		for( int i = 0; i < 4; i++)
			begin
				if(moving_block_x[i] > right_x_in)
					right_x_in = moving_block_x[i];
				
				if(moving_block_x[i] < left_x_in)
					left_x_in = moving_block_x[i];
				
				if(moving_block_y[i] < top_y_in)
					top_y_in = moving_block_y[i];
				
				if(moving_block_y[i] > bottom_y_in)
					bottom_y_in = moving_block_y[i];
			end
		if(moving_block_in == 0)
		begin
			moving_block_in = random;
			
			unique case(random)
				3'd0: ;
				3'd1: begin // TRI
					moving_block_x_new[0] = 7;
					moving_block_x_new[1] = 8;
					moving_block_x_new[2] = 9;
					moving_block_x_new[3] = 8;
					moving_block_y_new[0] = 0;
					moving_block_y_new[1] = 0;
					moving_block_y_new[2] = 0;
					moving_block_y_new[3] = 1;
				end
				
				3'd2: begin // reverse L
					moving_block_x_new[0] = 9;
					moving_block_x_new[1] = 9;
					moving_block_x_new[2] = 9;
					moving_block_x_new[3] = 8;
					moving_block_y_new[0] = 0;
					moving_block_y_new[1] = 1;
					moving_block_y_new[2] = 2;
					moving_block_y_new[3] = 2;
				end
				
				3'd3: begin // L
					moving_block_x_new[0] = 8;
					moving_block_x_new[1] = 8;
					moving_block_x_new[2] = 8;
					moving_block_x_new[3] = 9;
					moving_block_y_new[0] = 0;
					moving_block_y_new[1] = 1;
					moving_block_y_new[2] = 2;
					moving_block_y_new[3] = 2;
				end
				
				3'd4: begin // square
					moving_block_x_new[0] = 8;
					moving_block_x_new[1] = 9;
					moving_block_x_new[2] = 8;
					moving_block_x_new[3] = 9;
					moving_block_y_new[0] = 0;
					moving_block_y_new[1] = 0;
					moving_block_y_new[2] = 1;
					moving_block_y_new[3] = 1;
				end
				
				3'd5: begin // rightface S
					moving_block_x_new[0] = 9;
					moving_block_x_new[1] = 9;
					moving_block_x_new[2] = 8;
					moving_block_x_new[3] = 8;
					moving_block_y_new[0] = 0;
					moving_block_y_new[1] = 1;
					moving_block_y_new[2] = 1;
					moving_block_y_new[3] = 2;
				end
				
				3'd6: begin // leftface S
					moving_block_x_new[0] = 8;
					moving_block_x_new[1] = 8;
					moving_block_x_new[2] = 9;
					moving_block_x_new[3] = 9;
					moving_block_y_new[0] = 0;
					moving_block_y_new[1] = 1;
					moving_block_y_new[2] = 1;
					moving_block_y_new[3] = 2;
				end
				
				3'd7: begin // I
					moving_block_x_new[0] = 7;
					moving_block_x_new[1] = 8;
					moving_block_x_new[2] = 9;
					moving_block_x_new[3] = 10;
					moving_block_y_new[0] = 0;
					moving_block_y_new[1] = 0;
					moving_block_y_new[2] = 0;
					moving_block_y_new[3] = 0;
				end
			endcase					
		end
		
		if (frame_clk_rising_edge)
		begin
			counter_in = counter + 5'b1;
			if(moving_block_in)
			begin
				for (int i = 0; i < 4; i++)
				begin
					if(moving_block_y[i] >= 23) //collision check (bottom)
					begin
						//moving_block_y[i] = 0;
						moving_block_in = 3'b0;
					end
					else if (regs[moving_block_y[i] + 1][moving_block_x[i]] != 0) // collision check (brick)
					begin
						down_check = 1;
						for(int j = 0; j < 4; j++)
						begin
							if(j != i && moving_block_x[j] == moving_block_x[i] && moving_block_y[j] == moving_block_y[i] + 1)
								down_check = 0;
						end
						
						if(down_check)
							moving_block_in = 3'b0;
					end
				end
			end			
			
			if(moving_block_in && counter_in == 5'b101) //counter delay
			begin
				
				unique case(keycode)
					8'h1A : begin // W press
						moving_block_x_new[0] = moving_block_y[0] - top_y + left_x;
						moving_block_x_new[1] = moving_block_y[1] - top_y + left_x;
						moving_block_x_new[2] = moving_block_y[2] - top_y + left_x;
						moving_block_x_new[3] = moving_block_y[3] - top_y + left_x;
						
						moving_block_y_new[0] = extension[moving_block_in] + left_x + top_y - moving_block_x[0];
						moving_block_y_new[1] = extension[moving_block_in] + left_x + top_y - moving_block_x[1];
						moving_block_y_new[2] = extension[moving_block_in] + left_x + top_y - moving_block_x[2];
						moving_block_y_new[3] = extension[moving_block_in] + left_x + top_y - moving_block_x[3];
					end
					
					8'h04: begin // A press
						for (int i = 0; i < 4; i++)
						begin
							if(moving_block_x[i] <= 0)
								check = 1;
							else if(regs[moving_block_x[i] - 1][moving_block_y[i]] != 0)
								check = check + 5'd1;
								for(int j = 0; j < 4; j++)
								begin
									if(j != i && moving_block_x[j] == moving_block_x[i] - 1 && moving_block_y[j] == moving_block_y[i])
										check = check - 5'd1;
								end
						end
						
						if(check == 0)
						begin
							moving_block_x_new[0] = moving_block_x[0] - 5'd1;
							moving_block_x_new[1] = moving_block_x[1] - 5'd1;
							moving_block_x_new[2] = moving_block_x[2] - 5'd1;
							moving_block_x_new[2] = moving_block_x[3] - 5'd1;
						end
					end
					
					8'h16 : begin // S press
						for (int i = 0; i < 4; i++)
						begin
							if(moving_block_x[i] <= 0)
								check = 5'd1;
							else if(regs[moving_block_x[i]][moving_block_y[i] + 1] != 0)
								check = check + 5'd1;
								for(int j = 0; j < 4; j++)
								begin
									if(j != i && moving_block_x[j] == moving_block_x[i] && moving_block_y[j] == moving_block_y[i] + 1)
										check = check - 5'd1;
								end
						end
			
						if(check == 0)
						begin
							moving_block_y_new[0] = moving_block_y[0] + 5'd1;
							moving_block_y_new[1] = moving_block_y[1] + 5'd1;
							moving_block_y_new[2] = moving_block_y[2] + 5'd1;
							moving_block_y_new[3] = moving_block_y[3] + 5'd1;
						end
					end
					
					8'h07 : begin // D press
						for (int i = 0; i < 4; i++)
						begin
							if(moving_block_x[i] >= 17)
								check = 1;
							else if(regs[moving_block_x[i] + 1][moving_block_y[i]] != 0)
								check = check + 5'd1;
								for(int j = 0; j < 4; j++)
								begin
									if(j != i && moving_block_x[j] == moving_block_x[i] + 1 && moving_block_y[j] == moving_block_y[i])
										check = check - 5'd1;
								end
						end
						
						if(check == 0)
						begin
							moving_block_x_new[0] = moving_block_x[0] + 5'd1;
							moving_block_x_new[1] = moving_block_x[1] + 5'd1;
							moving_block_x_new[2] = moving_block_x[2] + 5'd1;
							moving_block_x_new[3] = moving_block_x[3] + 5'd1;
						end
					end
				endcase
			end
			
			// AUTO SHIFT COUNTER INCREMENT CASE
			if(counter == 5'b101)
			begin
				counter_counter_in = counter_counter + 5'b1;
				counter_in = 5'b0;
			end
			
			// AUTO SHIFT COUNTER EFFECT
			if(counter_counter == 5'b110)
			begin
				if(moving_block_in)
				begin
					for(int i = 0; i < 4; i++)
					begin
						moving_block_y_new[i] = moving_block_y[i] + 5'd1;
					end
				end
				counter_counter_in = 5'b0;
			end
			
			
			// UPDATE GRID VALUES, LOCATION
			for(int i = 0; i < 4; i++)
			begin
				regs_in[moving_block_y[i]][moving_block_x[i]] = 0;
				regs_in[moving_block_y_new[i]][moving_block_x_new[i]] = moving_block;
			end						
		end
	end
	
	int BlockX, BlockY;
   assign BlockX = DrawX/20 - 7;
   assign BlockY = DrawY/20;
	always_comb
	begin
		if(BlockX < 0 || BlockX > 17)
			pixel_value = 0;
		else
			pixel_value = regs[BlockY][BlockX];
	end
endmodule
